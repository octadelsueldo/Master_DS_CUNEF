e2 <- (diag(n)-P) %*% y    #diag de n es la matriz diagonal de n.
round(e-e2,2)      #para comparar que da bien los errores o residuos por ambas formas.
# Para P
round(P - t(P))   #Es simetrica porque la transpuesta de P es igual P
round(P %*% P-P,2)   #si la multiplicacion entre P por si misma es igual a la original P entonces es Idempotente. Al restar por si misma da 0, es decir, que esta bien.
# Para I-P
round((diag(n)-P) - t(diag(n)-P),2)  #es simetrica
round((diag(n)-P) %*% (diag(n)-P)-(diag(n)-P),2) #es idempotente
# (iii) Suma de cuadrados de los residuos
SCR1 <- t(e) %*% e
SCR1
SCR2 <- t(y) %*% (diag(n)-P) %*% y
SCR2
round(SCR1-SCR2,2)    #si se puede escribir con la misma funcion
uno <- rep(1,n) #crear una matriz de 1 a n
uno
X1 <-cbind(uno,X) #union de matrices
X1
X <- X1
b <- solve(t(X) %*% X) %*% t(X) %*% y       #(solve) es la inversa de la transpuesta de X por X... por la transpuesta de X por y
b
# Estimacion
yhat <- X %*% b
yhat
# Residuos o error. Es igual a y menos el y estimado
e <- (y - yhat)
e    #resultado del apartado (i)
P <- X %*% solve(t(X) %*% X) %*% t(X)
P
yhat2 <- P %*% y
round(yhat-yhat2, 2) #redondea la diferencia entre los dos con dos decimales. Sirve para COMPARAR.
e2 <- (diag(n)-P) %*% y    #diag de n es la matriz diagonal de n.
round(e-e2,2)      #para comparar que da bien los errores o residuos por ambas formas.
# Para P
round(P - t(P))   #Es simetrica porque la transpuesta de P es igual P
round(P %*% P-P,2)   #si la multiplicacion entre P por si misma es igual a la original P entonces es Idempotente. Al restar por si misma da 0, es decir, que esta bien.
# Para I-P
round((diag(n)-P) - t(diag(n)-P),2)  #es simetrica
round((diag(n)-P) %*% (diag(n)-P)-(diag(n)-P),2) #es idempotente
# (iii) Suma de cuadrados de los residuos
SCR1 <- t(e) %*% e
SCR1
SCR2 <- t(y) %*% (diag(n)-P) %*% y
SCR2
round(SCR1-SCR2,2)    #si se puede escribir con la misma funcion
A <- matrix(c(1,5,-2,1,2,-1,3,6,-3),3,3)
A
A^3
A[3, ] = A[2+3, ]
A[3, ] = A[c(2+3), ]
A[3, ] = A[1, ] + A[2,]
A
A[, 3] = A[, 1] + A[,2]
A
A <- matrix(c(1,5,-2,1,2,-1,3,6,-3),3,3)
A
A[, 3] = A[, 1] + A[,2]
A
# --- Declarar primero las columnas
x = 1:3; i = seq(0,9, by = 1); j = rep(0, 9, by =1) ; x; i; j #[1] 1 2 3
#[1] 1 2 3
#[1] 0 1 2 3 4 5 6 7 8 9
#[1] 0 0 0 0 0 0 0 0 0
C = matrix(c(x,i,j), nrow = length(x)); C # ncol no es necesario declararlo # [,1] [,2] [,3]
# --- Declarar primero las columnas
x = 1:10; i = seq(0,9, by = 1); j = rep(0, 9, by =1) ; x; i; j
#[1] 1 2 3
#[1] 0 1 2 3 4 5 6 7 8 9
#[1] 0 0 0 0 0 0 0 0 0
C = matrix(c(x,i,j), nrow = length(x)); C # ncol no es necesario declararlo # [,1] [,2] [,3]
# --- Declarar primero las columnas
x = 1:10; i = seq(0,9, by = 1); j = rep(1, 10) ; x; i; j
#[1] 1 2 3
#[1] 0 1 2 3 4 5 6 7 8 9
#[1] 0 0 0 0 0 0 0 0 0
C = matrix(c(x,i,j), nrow = length(x)); C # ncol no es necesario declararlo # [,1] [,2] [,3]
# --- Declarar primero las columnas
x = 1:10; i = seq(0,9, by = 1); j= seq(0,9,1); const = rep(1, 10) ; x; i; j; const
#[1] 1 2 3
#[1] 0 1 2 3 4 5 6 7 8 9
#[1] 0 0 0 0 0 0 0 0 0
C = matrix(c(x,i,j, const), nrow = length(x)); C # ncol no es necesario declararlo # [,1] [,2] [,3]
#[1] 1 2 3
#[1] 0 1 2 3 4 5 6 7 8 9
#[1] 0 0 0 0 0 0 0 0 0
C = matrix(c(i,j, const), nrow = length(x)); C # ncol no es necesario declararlo # [,1] [,2] [,3]
#[1] 1 2 3
#[1] 0 1 2 3 4 5 6 7 8 9
#[1] 0 0 0 0 0 0 0 0 0
C = matrix(c(i^2,j^2, const), nrow = length(x)); C # ncol no es necesario declararlo # [,1] [,2] [,3]
det(C)
A <- matrix(c(1,5,-2,1,2,-1,3,6,-3),3,3)
A
AA<-mtx.exp(A,3)
AA
install.packages("Biodem")
library(Biodem)
AA<-mtx.exp(A,3)
AA
A <- 0.7
B <- 0.2
AB <- 0.1
interseccion <- A * B    #no son independientes xq no se cumple la condicion de probabilidades independientes ya que el producto A x B no es la interseccion
AuB <- A + B - interseccion
Bc <- 1 - B
Ac <- 1 - A
AcondB <- interseccion/B
AcB<- B - interseccion
ABc <- A - interseccion
AcBc <- Ac*Bc
x <- c(-2,-1,0,1,2) # seq(-2,2,1)
p <- c(0.15, 0.25, 0.3, 0.2, 0.1)
sum(p) # distribucion genuina
# Media y varianza
mx <- sum(x*p)
mx
varx <- sum((x-mx)^2*p)
varx
sum(x^2*p)-mx^2 # Otra forma
# Coeficientes de asimetria y curtosis
g1 <- sum((x-mx)^3*p)/varx^(3/2)
g2 <- sum((x-mx)^4*p)/varx^(2)-3
c(mx,sqrt(varx),g1,g2)
# probabilidad a priori
pCi <- c(15, 15, 21, 27, 22)/100    #porcentajes de fabicacion
sum(pCi)
# verosimilitudes
pD_Ci <- c(1, 0.5, 1.5, 0.7, 1.2)/100         #porcentajes de defectuosos
pD <- pCi %*% pD_Ci                #probabilidad de defectuosos
pCi_D <- (pCi * pD_Ci) /as.numeric(pD)
round(pCi_D*100,2)
sum(pCi_D)
# Identifico la linea de produccion mas probable
which.max(pCi_D)              #esto calcula el indice y me dice el maximo que debo elegir
#-----------------------------------------------------
# MDS - Fundamentos de probabilidad
# Distribucion binomial
# Practica 6
#----------------------------------------------------------------------
x<-0:25
nensayos<-25
probexito<-0.15
dbinom(x,nensayos,probexito)    #fundion de densidad de la dist binomial con parametros X, nensayos y probexito
tabla<-cbind(x,dbinom(x,nensayos,probexito))
tabla
#----------------------------------------------------------------------
# Media y desviacion tipica
#----------------------------------------------------------------------
mediab<-nensayos*probexito
mediab
dtbinomial<-(nensayos*probexito*(1-probexito))^0.5
dtbinomial
par(mfrow=c(1, 2))
plot(x,dbinom(x,nensayos,probexito),type="h",xlab="Numero de ventas",  #type es importante para elegir el grafico correcto.
ylab="Probabilidades",main="Prob. numero de ventas")
plot(x,pbinom(x,nensayos,probexito),type="s",xlab="Numero de ventas",ylab="Probabilidades",
main="Numero de ventas, prob. acumuladas")
par(mfrow=c(1, 1))
#----------------------------------------------------------------------
# Tabla funcion de distribucion
#----------------------------------------------------------------------
tabla<-cbind(x,pbinom(x,nensayos,probexito))
tabla    #tabla de probabilidades acumuladas
#----------------------------------------------------------------------
# Probabilidades
#----------------------------------------------------------------------
1-dbinom(0,5,probexito)  #probabilidad de que en 5 visita realice al menos una venta
1-pbinom(3,10,probexito) #probabilidad de que en 10 visita realice al menos cuatro ventas
#----------------------------------------------------------------------
# Probabilidades
#----------------------------------------------------------------------
1-ppois(4,4)  # Probabilidad  de  que  en  una  jornada  cometa  al  menos  un  fallo.
dpois(5,4)  # Obtener  las  probabilidades  de  que  en  una  jornada  cometa  x  =  0, 1, 2, 3, 4  y  fallos.
1-dpois(5,4) # Probabilidad  de  que  en  una  jornada  cometa  x  fallos  o  menos,  para   x  =  0, 1, 2, 3, 4  y 5.
dpois(4,4)  # Obtener  las  probabilidades  de  que  en  una  jornada  cometa  x  =  0, 1, 2, 3, 4  y  fallos.
1-dpois(6,4) # Probabilidad  de  que  en  una  jornada  cometa  x  fallos  o  menos,  para   x  =  0, 1, 2, 3, 4  y 5.
# Tabla funcion de distribucion
#----------------------------------------------------------------------
n <- 0:10
tabla<-cbind(n,ppois(10,4))
tabla #tabla de probabilidad acumulada
tabla<-cbind(n,ppois(n,4))
tabla #tabla de probabilidad acumulada
# Tabla funcion de distribucion
#----------------------------------------------------------------------
n <- 0:12
tabla<-cbind(n,ppois(n,4))
tabla #tabla de probabilidad acumulada
data("mtcars")
names(mtcars)
head(mtcars)
library(dplyr)
data <- mtcars %>% select(c(1,3,4,5,6,7))
covarianza <- cov(data)
correlacion <- cor(data)
library(Hmisc)
#rh <- rcorr(as.matrix(data,type="pearson") #correlacion de los rendimientos tal cual pearson.
#rh
#rh$r
#install.packages("corrplot")
library(corrplot)
corrplot(correlacion, type = "upper", order="hclust", tl.col="black", tl.srt=45) #si no hay correlacion es azul claro y si es neativa es rojo.
# Autovalores y autovectores de la matriz de covarianzas
eigen(covarianza)
eigen(covarianza)$values
sum(eigen(covarianza)$values) # Traza de S
det(covarianza)
# Autovalores y autovectores de la matriz de covarianzas
eigen(correlacion)
eigen(correlacion)$values
sum(eigen(correlacion)$values) # Traza de S
det(correlacion)
#>>> Cálculo automático con la función de R cor.test()
(cor.test(data,data))
# Method 1: Formula notation
##  Use if x and y are in a dataframe
attach(data)
cor.test(formula = ~ mpg + disp + hp + drat + wt + qsec,
data = data)
rm(list=ls())
f<- function(x) -exp(-(x-5)^2)
plot(f,-10,10)
df <- function(x)  2*(x-5)*f(x)
fmin<-optimize(f,c(-10,10),tol=0.001) #tol es la tolerancia
fmin #es el minimo
fmin2<-optim(1,f) #aca debemos darle un valor inicial
fmin2 #enviara un valor par que es el minimo. Lo hace en 18 passos en este caso. $convergence nos dice alcanzo uno en caso de que de
#ese valor.
fmin3<-optim(1,f,df) #si uno utiliza la derivada tmb llega al resultado.
fmin3
rm(list=ls())
f <- function(x1,y1) (x1^2+y1-11)^2+(x1+y1^2-7)^2
x<- seq(-5,5,0.2)
y<- seq(-5,5,0.2)
z<- outer(x,y,f) #la funcion outer es como una hoja de calculo. Nos define para un valor de una fila y una columna los datos.
#Se pueden poner otras operaciones dentro de outer.
z
persp(x,y,z, phi = -20, col="yellow", shade=0.60, ticktype = "detailed") # ok dibuja una funcion de tres variables
f <-  function(x1,y1) -2*(x1^2+y1^2)+(x1^4+y1^4)-7
x<- seq(-5,5,0.2)
y<- seq(-5,5,0.2)
z<- outer(x,y,f) #la funcion outer es como una hoja de calculo. Nos define para un valor de una fila y una columna los datos.
#Se pueden poner otras operaciones dentro de outer.
z
persp(x,y,z, phi = -20, col="yellow", shade=0.60, ticktype = "detailed") # ok dibuja una funcion de tres variables
x<- seq(-10,10,0.2)
y<- seq(-10,10,0.2)
z<- outer(x,y,f) #la funcion outer es como una hoja de calculo. Nos define para un valor de una fila y una columna los datos.
#Se pueden poner otras operaciones dentro de outer.
z
persp(x,y,z, phi = -20, col="yellow", shade=0.60, ticktype = "detailed") # ok dibuja una funcion de tres variables
x<- seq(-5,5,0.2)
y<- seq(-5,5,0.2)
z<- outer(x,y,f) #la funcion outer es como una hoja de calculo. Nos define para un valor de una fila y una columna los datos.
#Se pueden poner otras operaciones dentro de outer.
z
persp(x,y,z, phi = -20, col="yellow", shade=0.60, ticktype = "detailed") # ok dibuja una funcion de tres variables
plot(x=x, y=f, type='p', main="con type='p'")
plot(x=x, y=y, type='p', main="con type='p'")
plot(x=x, y=y, type='l', main="con type='p'")
f <-  function(x1,y1) -2*((x1^2)+(y1^2))+((x1^4)+(y1^4))-11
x<- seq(-5,5,0.2)
y<- seq(-5,5,0.2)
z<- outer(x,y,f) #la funcion outer es como una hoja de calculo. Nos define para un valor de una fila y una columna los datos.
#Se pueden poner otras operaciones dentro de outer.
z
persp(x,y,z, phi = -20, col="yellow", shade=0.60, ticktype = "detailed") # ok dibuja una funcion de tres variables
f <-  function(x1,y1) -2*(((x1^2)+(y1^2)))+((x1^4)+(y1^4))-11
x<- seq(-5,5,0.2)
y<- seq(-5,5,0.2)
z<- outer(x,y,f) #la funcion outer es como una hoja de calculo. Nos define para un valor de una fila y una columna los datos.
#Se pueden poner otras operaciones dentro de outer.
z
persp(x,y,z, phi = -20, col="yellow", shade=0.60, ticktype = "detailed") # ok dibuja una funcion de tres variables
f <-  function(x1,y1) -2*(((x1**2)+(y1**2)))+((x1**4)+(y1**4))-11
x<- seq(-5,5,0.2)
y<- seq(-5,5,0.2)
z<- outer(x,y,f) #la funcion outer es como una hoja de calculo. Nos define para un valor de una fila y una columna los datos.
#Se pueden poner otras operaciones dentro de outer.
z
persp(x,y,z, phi = -20, col="yellow", shade=0.60, ticktype = "detailed") # ok dibuja una funcion de tres variables
plot(x=x, y=y, type='l', main="con type='l'")
f <-  function(x1,y1) -2*(((x1**2)+(y1**2)))+((x1**4)+(y1**4))-11
x<- seq(-5,5,0.2, len = 200)
y<- seq(-5,5,0.2, len = 200)
z<- outer(x,y,f) #la funcion outer es como una hoja de calculo. Nos define para un valor de una fila y una columna los datos.
#Se pueden poner otras operaciones dentro de outer.
z
persp(x,y,z, phi = -20, col="yellow", shade=0.60, ticktype = "detailed") # ok dibuja una funcion de tres variables
#otra forma
persp(x,y,z, phi = -20, col="yellow", theta=-30,phi=15, shade=0.60, ticktype = "detailed") # ok dibuja una funcion de tres variables
#otra forma
persp(x,y,z, phi = -20, col="yellow", theta=-30, shade=0.60, ticktype = "detailed") # ok dibuja una funcion de tres variables
image(x,y,z)
fx <- function(x,y,h=0.001) (f(x+h,y)-f(x,y))/h
fy <- function(x,y,h=0.001) (f(x,y+h)-f(x,y))/h
zfx <- outer(x,y,fx)
zfy <- outer(x,y,fy)
contour(x,y,zfx,level=0) >contour(x,y,zfy,level=0, add=T, col=”red”)
contour(x,y,zfx,level=0)
contour(x,y,zfy,level=0, add=T, col=”red”)
contour(x,y,zfy,level=0, add=T, col="red")
x <- seq(-2,2,len=400)
y <- seq(-2,2,len=400)
z<- outer(x,y,f)
image(x,y,z)
contour(x,y,z,add=T)
fbb<-function(x) f(x[1],x[2])
optim(c(0.5,0.5),gb,control=list(fnscale=-1))
fxb <- function(x) fx(x[1],x[2])
fyb <- function(x) fy(x[1],x[2])
sumssq <- function(x) fxb(x)**2+fyb(x)**2
optim(c(0.1,0.1),sumssq)$par
optim(c(-0.4,0.1),sumssq)$par
optim(c(0.1,-0.4),sumssq)$par
optim(c(-0.4,0.4),fbb)
optim(c(-0.4,0.4),fbb) #The values are: 5.457516e+53 and 5.399318e+53 => 𝒙 → +∞ and y-> +∞
optim(c(0.4,-0.4),fb) #The values are 4.804367e+54 and -4.727385e+54 => x-> +∞ and y-> -∞.
f1 <-  function(x1,y1) -2*(((x[1]**2)+(x[2]**2)))+((x[1]**4)+(x[2]**4))-11
optim(c(-3,3),f1)
optim(c(-3,3),f1)$par
optim(c(-3,3),f1)$value
rm(list=ls())
f <- function(x1,y1) (x1^2+y1-11)^2+(x1+y1^2-7)^2
x<- seq(-5,5,0.2)
y<- seq(-5,5,0.2)
z<- outer(x,y,f) #la funcion outer es como una hoja de calculo. Nos define para un valor de una fila y una columna los datos.
#Se pueden poner otras operaciones dentro de outer.
z
persp(x,y,z, phi = -20, col="yellow", shade=0.60, ticktype = "detailed") # ok dibuja una funcion de tres variables
f1 <- function(x) (x[1]^2+x[2]-11)^2+(x[1]+x[2]^2-7)^2 #definimos los argumentos de la funcion como vectores
optim(c(-3,3),f1)   #value indica el valor de la funcion.
optim(c(-3,-3),f1)
optim(c(3,-3),f1) # min
#f (x, y)  =  −2(x2  + y2 ) + (x4  + y4 ) − 11
# Probar  que  tiene  9  puntos  cr´ıticos,  de  los  cu´ales  4  son  m´ınimos,  1  m´aximo  y  el  resto  puntos de  silla.
f <-  function(x1,y1) -2*(((x1**2)+(y1**2)))+((x1**4)+(y1**4))-11
x<- seq(-5,5,0.2, len = 200)
y<- seq(-5,5,0.2, len = 200)
z<- outer(x,y,f) #la funcion outer es como una hoja de calculo. Nos define para un valor de una fila y una columna los datos.
#Se pueden poner otras operaciones dentro de outer.
z
persp(x,y,z, phi = -20, col="yellow", shade=0.60, ticktype = "detailed") # ok dibuja una funcion de tres variables
#otra forma de verlo
image(x,y,z)
optim(c(-0.4,-0.4),fb) # The values are -1.185271e+54 and -6.367610e+54 =>x-> -∞ and y-> -∞.
optim(c(-0.4,-0.4),fb) # The values are -1.185271e+54 and -6.367610e+54 =>x-> -∞ and y-> -∞.
f1 <-  function(x1,y1) -2*(((x[1]**2)+(x[2]**2)))+((x[1]**4)+(x[2]**4))-11
optim(c(-5,5),f1)
optim(c(-5,5),f1)$par
optim(c(-5,5),f1)$value
f <-  function(x1,y1)  ((1-x1)**2)+100*(y1-x**2)**2
x<- seq(-5,5,0.2, len = 200)
y<- seq(-5,5,0.2, len = 200)
f <-  function(x1,y1)  ((1-x1)**2)+100*(y1-x**2)**2
x<- seq(-5,5,0.2, len = 200)
f <-  function(x1,y1)  ((1-x1)**2)+100*(y1-x**2)**2
x<- seq(-5,5,0.2)
y<- seq(-5,5,0.2)
z<- outer(x,y,f) #la funcion outer es como una hoja de calculo. Nos define para un valor de una fila y una columna los datos.
#Se pueden poner otras operaciones dentro de outer.
z
persp(x,y,z, phi = -20, col="yellow", shade=0.60, ticktype = "detailed") # ok dibuja una funcion de tres variables
x<- seq(-3,3,0.2)
y<- seq(-3,3,0.2)
z<- outer(x,y,f) #la funcion outer es como una hoja de calculo. Nos define para un valor de una fila y una columna los datos.
#Se pueden poner otras operaciones dentro de outer.
z
persp(x,y,z, phi = -20, col="yellow", shade=0.60, ticktype = "detailed") # ok dibuja una funcion de tres variables
f1 <-  function(x)  ((1-x[1])**2)+100*(x[2]-x[1]**2)**2
optim(c(-5,5),f1)
optim(c(-5,5),f1)$par
optim(c(-5,5),f1)$value
# Estamos  trabajando  con  la  funci´on
#f (x, y)  =  −2(x2  + y2 ) + (x4  + y4 ) − 11
# Probar  que  tiene  9  puntos  cr´ıticos,  de  los  cu´ales  4  son  m´ınimos,  1  m´aximo  y  el  resto  puntos de  silla.
f <-  function(x1,y1) -2*(((x1**2)+(y1**2)))+((x1**4)+(y1**4))-11
x<- seq(-5,5,0.2, len = 200)
y<- seq(-5,5,0.2, len = 200)
z<- outer(x,y,f) #la funcion outer es como una hoja de calculo. Nos define para un valor de una fila y una columna los datos.
#Se pueden poner otras operaciones dentro de outer.
z
persp(x,y,z, phi = -20, col="yellow", shade=0.60, ticktype = "detailed") # ok dibuja una funcion de tres variables
#otra forma de verlo
image(x,y,z)
f <-  function(x1,y1) -2*(((x1**2)+(y1**2)))+((x1**4)+(y1**4))-11
x<- seq(-5,5,0.2)
y<- seq(-5,5,0.2)
z<- outer(x,y,f) #la funcion outer es como una hoja de calculo. Nos define para un valor de una fila y una columna los datos.
#Se pueden poner otras operaciones dentro de outer.
z
persp(x,y,z, phi = -20, col="yellow", shade=0.60, ticktype = "detailed") # ok dibuja una funcion de tres variables
#otra forma de verlo
image(x,y,z)
f1 <-  function(x) -2*(((x[1]**2)+(x[2]**2)))+((x[1]**4)+(x[2]**4))-11
optim(c(-5,5),f1)
optim(c(-5,5),f1)$par
optim(c(-5,5),f1)$value
#otra forma de verlo
image(x,y,z)
fx <- function(x,y,h=0.001) (f(x+h,y)-f(x,y))/h
f <-  function(x1,y1)  ((1-x1)**2)+100*(y1-x**2)**2
x<- seq(-3,3,0.2)
y<- seq(-3,3,0.2)
z<- outer(x,y,f) #la funcion outer es como una hoja de calculo. Nos define para un valor de una fila y una columna los datos.
#Se pueden poner otras operaciones dentro de outer.
z
persp(x,y,z, phi = -20, col="yellow", shade=0.60, ticktype = "detailed") # ok dibuja una funcion de tres variables
f1 <-  function(x)  ((1-x[1])**2)+100*(x[2]-x[1]**2)**2
optim(c(-5,5),f1)
optim(c(-5,5),f1)$par
optim(c(-5,5),f1)$value
#otra forma de verlo
image(x,y,z)
'''
This command allows us to detect minima and maxima by showing us the height of the function at different points: lighter colors
(yellow/white) indicate high regions, while darker red indicates that the function decreases.
Here, we notice that the angle at the upright boundary of the picture is almost “white”, while the remaining three are more “red”.
However, this is not enough to conclude that these points are optimizers, since the function can grow or decrease to infinity.
Instead, we can observe on the picture some “bright red” parts that meet forming a cross. This allows us to identify three saddle points.
'''
fx <- function(x,y,h=0.001) (f(x+h,y)-f(x,y))/h
fy <- function(x,y,h=0.001) (f(x,y+h)-f(x,y))/h
zfx <- outer(x,y,fx)
zfy <- outer(x,y,fy)
contour(x,y,zfx,level=0)
contour(x,y,zfy,level=0, add=T, col="red")
x <- seq(-2,2,len=400)
y <- seq(-2,2,len=400)
z<- outer(x,y,f)
image(x,y,z)
contour(x,y,z,add=T)
# Estamos  trabajando  con  la  funci´on
#f (x, y)  =  −2(x2  + y2 ) + (x4  + y4 ) − 11
# Probar  que  tiene  9  puntos  cr´ıticos,  de  los  cu´ales  4  son  m´ınimos,  1  m´aximo  y  el  resto  puntos de  silla.
f <-  function(x1,y1) -2*(((x1**2)+(y1**2)))+((x1**4)+(y1**4))-11
x<- seq(-5,5,0.2)
y<- seq(-5,5,0.2)
z<- outer(x,y,f) #la funcion outer es como una hoja de calculo. Nos define para un valor de una fila y una columna los datos.
#Se pueden poner otras operaciones dentro de outer.
z
persp(x,y,z, phi = -20, col="yellow", shade=0.60, ticktype = "detailed") # ok dibuja una funcion de tres variables
#otra forma de verlo
image(x,y,z)
'''
This command allows us to detect minima and maxima by showing us the height of the function at different points: lighter colors
(yellow/white) indicate high regions, while darker red indicates that the function decreases.
Here, we notice that the angle at the upright boundary of the picture is almost “white”, while the remaining three are more “red”.
However, this is not enough to conclude that these points are optimizers, since the function can grow or decrease to infinity.
Instead, we can observe on the picture some “bright red” parts that meet forming a cross. This allows us to identify three saddle points.
'''
'''
Now we must obtain the partial derivatives in order to draw the zero level sets that will show us precisely, through their intersections, where the stationary points are located.
The partial derivative with respect to 𝒙 in R is:
'''
fx <- function(x,y,h=0.001) (f(x+h,y)-f(x,y))/h
'''
This describes the incremental ratio. We shock 𝒙 by adding to it an arbitrarily small value, 𝒉(= 𝟎. 𝟎𝟎𝟏). In this way, we compute the rate of change (of the function).
The same applies to 𝒚, as follows:
'''
fy <- function(x,y,h=0.001) (f(x,y+h)-f(x,y))/h
'''
We now re-use the other function to compute the 𝒛 values corresponding to the partial derivatives.
Thus 𝒛𝒇𝒙 and 𝒛𝒇𝒚 are matrices, 400 rows and 400 columns, with values of 𝒇𝒙 and 𝒇𝒚 respectively.
'''
zfx <- outer(x,y,fx)
zfy <- outer(x,y,fy)
'''
Now we are perfectly able, using the “contour” function. This command draws lines that show the level sets of the function you insert
as an input. If we use it with respect to both partial derivatives at the zero level, it becomes possible to see the stationary points,
which are:  * Saddle points where the lines cross;
* Maxima and minima where we observe small circles.
'''
contour(x,y,zfx,level=0)
contour(x,y,zfy,level=0, add=T, col="red")
'''
When giving the command we write:
- the two variables, 𝒙 and 𝒚;
- the function for which we want to see the level sets.
- level =0 because we are not interested just in the others.
To the command that draws the zero level sets of zfy, we add:
- add=T to impose this graph over the previous one;
- col=”red” to change the colors of the line, to distinguish
properly the contours for 𝒇𝒙 and 𝒇𝒚.
Afterwards, it is straightforward to observe the 4 stationary points at the four crossing points. We can read the coordinates
of the points directly on the axis of the pictures.
From the image picture we have found just three saddle points, and no maxima or minima, while here we see the zero level sets
crossing in 4 points. This means that we still do not know the nature of one stationary point. To understand what kind of optimizer it is,
we must zoom on its area, changing the proportions of the axis.
We do this through “seq” (choosing a shorter interval for x and y), and defining 𝒛 correspondingly.
'''
x <- seq(-2,2,len=400)
y <- seq(-2,2,len=400)
z<- outer(x,y,f)
#Looking at the picture of both colors and contours, we will identify the “misterious” point.
image(x,y,z)
contour(x,y,z,add=T)
fbb<-function(x) f(x[1],x[2])
optim(c(0.5,0.5),fbb,control=list(fnscale=-1))
optim(c(0.5,0.5),fbb,control=list(fnscale=-1))$par #(the coordinates of the point)
optim(c(0.5,0.5),fbb,control=list(fnscale=-1))$value #(the corresponding z value)
optim(c(-1,1),fbb,control=list(fnscale=-1))
optim(c(-1,1),fbb,control=list(fnscale=-1))$par #(the coordinates of the point)
optim(c(-1,1),fbb,control=list(fnscale=-1))$value #(the corresponding z value)
fxb <- function(x) fx(x[1],x[2])
fyb <- function(x) fy(x[1],x[2])
sumssq <- function(x) fxb(x)**2+fyb(x)**2
optim(c(-2,2),sumssq)$par ##(this is almost 0,0)
optim(c(-1,1),sumssq)$par
optim(c(-0.5,0.5),sumssq)$par
optim(c(-2,2),fbb) #The values are: 5.457516e+53 and 5.399318e+53 => 𝒙 → +∞ and y-> +∞
optim(c(-2,2),fbb,control=list(fnscale=-1)) # Thevaluesare-4.727385e+54and 4.804367e+54=>x->-∞andy->+∞.
